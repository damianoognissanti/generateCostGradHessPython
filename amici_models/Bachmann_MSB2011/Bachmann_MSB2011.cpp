#include <array>
#include <amici/defines.h>

namespace amici {

namespace model_Bachmann_MSB2011 {

std::array<const char*, 69> parameterNames = {
    "CISEqc", // p[0]
"CISInh", // p[1]
"CISRNADelay", // p[2]
"CISRNATurn", // p[3]
"CISTurn", // p[4]
"CISEqcOE", // p[5]
"EpoRActJAK2", // p[6]
"EpoRCISInh", // p[7]
"EpoRCISRemove", // p[8]
"JAK2ActEpo", // p[9]
"JAK2EpoRDeaSHP1", // p[10]
"SHP1ActEpoR", // p[11]
"SHP1Dea", // p[12]
"SHP1ProOE", // p[13]
"SOCS3EqcOE", // p[14]
"SOCS3Eqc", // p[15]
"SOCS3Inh", // p[16]
"SOCS3RNADelay", // p[17]
"SOCS3RNATurn", // p[18]
"SOCS3Turn", // p[19]
"STAT5ActEpoR", // p[20]
"STAT5ActJAK2", // p[21]
"STAT5Exp", // p[22]
"STAT5Imp", // p[23]
"init_EpoRJAK2", // p[24]
"init_SHP1", // p[25]
"init_STAT5", // p[26]
"observableParameter1_observable_CISRNA_foldA", // p[27]
"observableParameter1_observable_CISRNA_foldB", // p[28]
"observableParameter1_observable_CISRNA_foldC", // p[29]
"observableParameter1_observable_CIS_au", // p[30]
"observableParameter2_observable_CIS_au", // p[31]
"observableParameter1_observable_CIS_au1", // p[32]
"observableParameter1_observable_CIS_au2", // p[33]
"observableParameter1_observable_SOCS3RNA_foldA", // p[34]
"observableParameter1_observable_SOCS3RNA_foldB", // p[35]
"observableParameter1_observable_SOCS3RNA_foldC", // p[36]
"observableParameter1_observable_SOCS3_au", // p[37]
"observableParameter2_observable_SOCS3_au", // p[38]
"observableParameter1_observable_pEpoR_au", // p[39]
"observableParameter2_observable_pEpoR_au", // p[40]
"observableParameter1_observable_pJAK2_au", // p[41]
"observableParameter2_observable_pJAK2_au", // p[42]
"observableParameter1_observable_pSTAT5B_rel", // p[43]
"observableParameter1_observable_pSTAT5_au", // p[44]
"observableParameter2_observable_pSTAT5_au", // p[45]
"observableParameter1_observable_tSHP1_au", // p[46]
"observableParameter1_observable_tSTAT5_au", // p[47]
"noiseParameter1_observable_CISRNA_foldA", // p[48]
"noiseParameter1_observable_CISRNA_foldB", // p[49]
"noiseParameter1_observable_CISRNA_foldC", // p[50]
"noiseParameter1_observable_CIS_abs", // p[51]
"noiseParameter1_observable_CIS_au", // p[52]
"noiseParameter1_observable_CIS_au1", // p[53]
"noiseParameter1_observable_CIS_au2", // p[54]
"noiseParameter1_observable_SHP1_abs", // p[55]
"noiseParameter1_observable_SOCS3RNA_foldA", // p[56]
"noiseParameter1_observable_SOCS3RNA_foldB", // p[57]
"noiseParameter1_observable_SOCS3RNA_foldC", // p[58]
"noiseParameter1_observable_SOCS3_abs", // p[59]
"noiseParameter1_observable_SOCS3_au", // p[60]
"noiseParameter1_observable_STAT5_abs", // p[61]
"noiseParameter1_observable_pEpoR_au", // p[62]
"noiseParameter1_observable_pJAK2_au", // p[63]
"noiseParameter1_observable_pSTAT5B_rel", // p[64]
"noiseParameter1_observable_pSTAT5_au", // p[65]
"noiseParameter2_observable_pSTAT5_au", // p[66]
"noiseParameter1_observable_tSHP1_au", // p[67]
"noiseParameter1_observable_tSTAT5_au", // p[68]
};

std::array<const char*, 10> fixedParameterNames = {
    "CISRNAEqc", // k[0]
"SOCS3RNAEqc", // k[1]
"Epo", // k[2]
"ActD", // k[3]
"CISoe", // k[4]
"SOCS3oe", // k[5]
"init_SHP1_multiplier", // k[6]
"init_EpoRJAK2_CIS", // k[7]
"init_CIS_multiplier", // k[8]
"init_SOCS3_multiplier", // k[9]
};

std::array<const char*, 25> stateNames = {
    "EpoRJAK2", // x_rdata[0]
"EpoRpJAK2", // x_rdata[1]
"p1EpoRpJAK2", // x_rdata[2]
"p2EpoRpJAK2", // x_rdata[3]
"p12EpoRpJAK2", // x_rdata[4]
"EpoRJAK2_CIS", // x_rdata[5]
"SHP1", // x_rdata[6]
"SHP1Act", // x_rdata[7]
"STAT5", // x_rdata[8]
"pSTAT5", // x_rdata[9]
"npSTAT5", // x_rdata[10]
"CISnRNA1", // x_rdata[11]
"CISnRNA2", // x_rdata[12]
"CISnRNA3", // x_rdata[13]
"CISnRNA4", // x_rdata[14]
"CISnRNA5", // x_rdata[15]
"CISRNA", // x_rdata[16]
"CIS", // x_rdata[17]
"SOCS3nRNA1", // x_rdata[18]
"SOCS3nRNA2", // x_rdata[19]
"SOCS3nRNA3", // x_rdata[20]
"SOCS3nRNA4", // x_rdata[21]
"SOCS3nRNA5", // x_rdata[22]
"SOCS3RNA", // x_rdata[23]
"SOCS3", // x_rdata[24]
};

std::array<const char*, 20> observableNames = {
    "", // y[0]
"", // y[1]
"", // y[2]
"", // y[3]
"", // y[4]
"", // y[5]
"", // y[6]
"", // y[7]
"", // y[8]
"", // y[9]
"", // y[10]
"", // y[11]
"", // y[12]
"", // y[13]
"", // y[14]
"", // y[15]
"", // y[16]
"", // y[17]
"", // y[18]
"", // y[19]
};

std::array<const ObservableScaling, 20> observableScalings = {
    ObservableScaling::log10, // y[0]
ObservableScaling::log10, // y[1]
ObservableScaling::log10, // y[2]
ObservableScaling::log10, // y[3]
ObservableScaling::log10, // y[4]
ObservableScaling::log10, // y[5]
ObservableScaling::log10, // y[6]
ObservableScaling::log10, // y[7]
ObservableScaling::log10, // y[8]
ObservableScaling::log10, // y[9]
ObservableScaling::log10, // y[10]
ObservableScaling::log10, // y[11]
ObservableScaling::log10, // y[12]
ObservableScaling::log10, // y[13]
ObservableScaling::log10, // y[14]
ObservableScaling::log10, // y[15]
ObservableScaling::lin, // y[16]
ObservableScaling::log10, // y[17]
ObservableScaling::log10, // y[18]
ObservableScaling::log10, // y[19]
};

std::array<const char*, 36> expressionNames = {
    "flux_v1_v_0", // w[0]
"flux_v2_v_1", // w[1]
"flux_v3_v_2", // w[2]
"flux_v4_v_3", // w[3]
"flux_v5_v_4", // w[4]
"flux_v6_v_5", // w[5]
"flux_v7_v_6", // w[6]
"flux_v8_v_7", // w[7]
"flux_v9_v_8", // w[8]
"flux_v10_v_9", // w[9]
"flux_v11_v_10", // w[10]
"flux_v12_v_11", // w[11]
"flux_v13_v_12", // w[12]
"flux_v14_v_13", // w[13]
"flux_v15_v_14", // w[14]
"flux_v16_v_15", // w[15]
"flux_v17_v_16", // w[16]
"flux_v18_v_17", // w[17]
"flux_v19_v_18", // w[18]
"flux_v20_v_19", // w[19]
"flux_v21_v_20", // w[20]
"flux_v22_v_21", // w[21]
"flux_v23_v_22", // w[22]
"flux_v24_v_23", // w[23]
"flux_v25_v_24", // w[24]
"flux_v26_v_25", // w[25]
"flux_v27_v_26", // w[26]
"flux_v28_v_27", // w[27]
"flux_v29_v_28", // w[28]
"flux_v30_v_29", // w[29]
"flux_v31_v_30", // w[30]
"flux_v32_v_31", // w[31]
"flux_v33_v_32", // w[32]
"flux_v34_v_33", // w[33]
"flux_v35_v_34", // w[34]
"flux_v36_v_35", // w[35]
};

std::array<const char*, 69> parameterIds = {
    "CISEqc", // p[0]
"CISInh", // p[1]
"CISRNADelay", // p[2]
"CISRNATurn", // p[3]
"CISTurn", // p[4]
"CISEqcOE", // p[5]
"EpoRActJAK2", // p[6]
"EpoRCISInh", // p[7]
"EpoRCISRemove", // p[8]
"JAK2ActEpo", // p[9]
"JAK2EpoRDeaSHP1", // p[10]
"SHP1ActEpoR", // p[11]
"SHP1Dea", // p[12]
"SHP1ProOE", // p[13]
"SOCS3EqcOE", // p[14]
"SOCS3Eqc", // p[15]
"SOCS3Inh", // p[16]
"SOCS3RNADelay", // p[17]
"SOCS3RNATurn", // p[18]
"SOCS3Turn", // p[19]
"STAT5ActEpoR", // p[20]
"STAT5ActJAK2", // p[21]
"STAT5Exp", // p[22]
"STAT5Imp", // p[23]
"init_EpoRJAK2", // p[24]
"init_SHP1", // p[25]
"init_STAT5", // p[26]
"observableParameter1_observable_CISRNA_foldA", // p[27]
"observableParameter1_observable_CISRNA_foldB", // p[28]
"observableParameter1_observable_CISRNA_foldC", // p[29]
"observableParameter1_observable_CIS_au", // p[30]
"observableParameter2_observable_CIS_au", // p[31]
"observableParameter1_observable_CIS_au1", // p[32]
"observableParameter1_observable_CIS_au2", // p[33]
"observableParameter1_observable_SOCS3RNA_foldA", // p[34]
"observableParameter1_observable_SOCS3RNA_foldB", // p[35]
"observableParameter1_observable_SOCS3RNA_foldC", // p[36]
"observableParameter1_observable_SOCS3_au", // p[37]
"observableParameter2_observable_SOCS3_au", // p[38]
"observableParameter1_observable_pEpoR_au", // p[39]
"observableParameter2_observable_pEpoR_au", // p[40]
"observableParameter1_observable_pJAK2_au", // p[41]
"observableParameter2_observable_pJAK2_au", // p[42]
"observableParameter1_observable_pSTAT5B_rel", // p[43]
"observableParameter1_observable_pSTAT5_au", // p[44]
"observableParameter2_observable_pSTAT5_au", // p[45]
"observableParameter1_observable_tSHP1_au", // p[46]
"observableParameter1_observable_tSTAT5_au", // p[47]
"noiseParameter1_observable_CISRNA_foldA", // p[48]
"noiseParameter1_observable_CISRNA_foldB", // p[49]
"noiseParameter1_observable_CISRNA_foldC", // p[50]
"noiseParameter1_observable_CIS_abs", // p[51]
"noiseParameter1_observable_CIS_au", // p[52]
"noiseParameter1_observable_CIS_au1", // p[53]
"noiseParameter1_observable_CIS_au2", // p[54]
"noiseParameter1_observable_SHP1_abs", // p[55]
"noiseParameter1_observable_SOCS3RNA_foldA", // p[56]
"noiseParameter1_observable_SOCS3RNA_foldB", // p[57]
"noiseParameter1_observable_SOCS3RNA_foldC", // p[58]
"noiseParameter1_observable_SOCS3_abs", // p[59]
"noiseParameter1_observable_SOCS3_au", // p[60]
"noiseParameter1_observable_STAT5_abs", // p[61]
"noiseParameter1_observable_pEpoR_au", // p[62]
"noiseParameter1_observable_pJAK2_au", // p[63]
"noiseParameter1_observable_pSTAT5B_rel", // p[64]
"noiseParameter1_observable_pSTAT5_au", // p[65]
"noiseParameter2_observable_pSTAT5_au", // p[66]
"noiseParameter1_observable_tSHP1_au", // p[67]
"noiseParameter1_observable_tSTAT5_au", // p[68]
};

std::array<const char*, 10> fixedParameterIds = {
    "CISRNAEqc", // k[0]
"SOCS3RNAEqc", // k[1]
"Epo", // k[2]
"ActD", // k[3]
"CISoe", // k[4]
"SOCS3oe", // k[5]
"init_SHP1_multiplier", // k[6]
"init_EpoRJAK2_CIS", // k[7]
"init_CIS_multiplier", // k[8]
"init_SOCS3_multiplier", // k[9]
};

std::array<const char*, 25> stateIds = {
    "EpoRJAK2", // x_rdata[0]
"EpoRpJAK2", // x_rdata[1]
"p1EpoRpJAK2", // x_rdata[2]
"p2EpoRpJAK2", // x_rdata[3]
"p12EpoRpJAK2", // x_rdata[4]
"EpoRJAK2_CIS", // x_rdata[5]
"SHP1", // x_rdata[6]
"SHP1Act", // x_rdata[7]
"STAT5", // x_rdata[8]
"pSTAT5", // x_rdata[9]
"npSTAT5", // x_rdata[10]
"CISnRNA1", // x_rdata[11]
"CISnRNA2", // x_rdata[12]
"CISnRNA3", // x_rdata[13]
"CISnRNA4", // x_rdata[14]
"CISnRNA5", // x_rdata[15]
"CISRNA", // x_rdata[16]
"CIS", // x_rdata[17]
"SOCS3nRNA1", // x_rdata[18]
"SOCS3nRNA2", // x_rdata[19]
"SOCS3nRNA3", // x_rdata[20]
"SOCS3nRNA4", // x_rdata[21]
"SOCS3nRNA5", // x_rdata[22]
"SOCS3RNA", // x_rdata[23]
"SOCS3", // x_rdata[24]
};

std::array<const char*, 20> observableIds = {
    "observable_CISRNA_foldA", // y[0]
"observable_CISRNA_foldB", // y[1]
"observable_CISRNA_foldC", // y[2]
"observable_CIS_abs", // y[3]
"observable_CIS_au", // y[4]
"observable_CIS_au1", // y[5]
"observable_CIS_au2", // y[6]
"observable_SHP1_abs", // y[7]
"observable_SOCS3RNA_foldA", // y[8]
"observable_SOCS3RNA_foldB", // y[9]
"observable_SOCS3RNA_foldC", // y[10]
"observable_SOCS3_abs", // y[11]
"observable_SOCS3_au", // y[12]
"observable_STAT5_abs", // y[13]
"observable_pEpoR_au", // y[14]
"observable_pJAK2_au", // y[15]
"observable_pSTAT5B_rel", // y[16]
"observable_pSTAT5_au", // y[17]
"observable_tSHP1_au", // y[18]
"observable_tSTAT5_au", // y[19]
};

std::array<const char*, 36> expressionIds = {
    "flux_v1_v_0", // w[0]
"flux_v2_v_1", // w[1]
"flux_v3_v_2", // w[2]
"flux_v4_v_3", // w[3]
"flux_v5_v_4", // w[4]
"flux_v6_v_5", // w[5]
"flux_v7_v_6", // w[6]
"flux_v8_v_7", // w[7]
"flux_v9_v_8", // w[8]
"flux_v10_v_9", // w[9]
"flux_v11_v_10", // w[10]
"flux_v12_v_11", // w[11]
"flux_v13_v_12", // w[12]
"flux_v14_v_13", // w[13]
"flux_v15_v_14", // w[14]
"flux_v16_v_15", // w[15]
"flux_v17_v_16", // w[16]
"flux_v18_v_17", // w[17]
"flux_v19_v_18", // w[18]
"flux_v20_v_19", // w[19]
"flux_v21_v_20", // w[20]
"flux_v22_v_21", // w[21]
"flux_v23_v_22", // w[22]
"flux_v24_v_23", // w[23]
"flux_v25_v_24", // w[24]
"flux_v26_v_25", // w[25]
"flux_v27_v_26", // w[26]
"flux_v28_v_27", // w[27]
"flux_v29_v_28", // w[28]
"flux_v30_v_29", // w[29]
"flux_v31_v_30", // w[30]
"flux_v32_v_31", // w[31]
"flux_v33_v_32", // w[32]
"flux_v34_v_33", // w[33]
"flux_v35_v_34", // w[34]
"flux_v36_v_35", // w[35]
};

std::array<int, 25> stateIdxsSolver = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
};

std::array<bool, 0> rootInitialValues = {
    
};

} // namespace model_Bachmann_MSB2011

} // namespace amici
